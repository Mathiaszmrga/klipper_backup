[include macros.cfg]

[mcu oledbttns]
serial: /dev/serial/by-id/usb-Klipper_stm32f042x6_2B0006800A43303059373020-if00 #Buttons + oled

[temperature_sensor oled_bttns]
sensor_type: temperature_mcu
sensor_mcu: oledbttns
min_temp: 0
max_temp: 100

[output_pin GREENLED]
pin: oledbttns:PA5
pwm: True
value: 0
shutdown_value: 0

[output_pin YELLOWLED]
pin: oledbttns:PB1
pwm: True
value: 0
shutdown_value: 0

[display]
lcd_type: ssd1306
i2c_mcu: oledbttns
i2c_bus: i2c1a
display_group: _default
menu_timeout: 60
menu_root: __home
click_pin: ^!oledbttns:PA14
back_pin: ^!oledbttns:PA6
up_pin: ^!oledbttns:PA3
down_pin: ^!oledbttns:PA13

#####################################################################
#      OLED meunues
#####################################################################

[menu __home]
type: list
name: Main

#####################################################################
#      Display printing menue
#####################################################################

[menu __home __prntr]
type: list
enable: {printer.idle_timeout.state == "Printing"}
name: Printer

[menu __home __prntr __pause]
type: command
name: Pause
gcode:
    TOGGLE_STATLEDY
    PAUSE
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __prntr __resume]
type: command
name: Resume
gcode:
    TOGGLE_STATLEDY
    RESUME
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __prntr __cancel]
type: command
name: Cancel
gcode:
    TOGGLE_STATLEDY
    CANCEL_PRINT
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

#####################################################################
#      Display moves menue
#####################################################################

[menu __home __move]
type: list
enable: {printer.idle_timeout.state == "Ready" or printer.idle_timeout.state == "Idle"}
name: Move

[menu __home __move __nostep]
type: command
name: No stepper
gcode:
    TOGGLE_STATLEDY
    DISABLE_STEPPERS
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __move __hmeall]
type: command
name: Home all
gcode:
    TOGGLE_STATLEDY
    G28
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __move  __hmex]
type: command
name: Home X
gcode:
    TOGGLE_STATLEDY
    G28 X
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __move __hmey]
type: command
name: Home Y
gcode:
    TOGGLE_STATLEDY
    G28 Y
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __move __hmez]
type: command
name: Home Z
gcode:
    TOGGLE_STATLEDY
    G28 Z
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

#####################################################################
#      OLED temperature menue
#####################################################################

[menu __home __temps]
type: list
enable: {printer.extruder.temperature < 50.0 and printer.idle_timeout.state == "Ready"}
name: Temps

[menu __home __temps __hotend]
type: input
enable: {'extruder' in printer}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode:
    TOGGLE_STATLEDY
    M104 T0 S{'%.0f' % menu.input}
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __temps __bed]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode:
    TOGGLE_STATLEDY
    M140 S{'%.0f' % menu.input}
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __temps __preheat_pla]
type: command
name: Preheat PLA
gcode:
    TOGGLE_STATLEDY
    M140 S60
    M104 S220
    RESPOND TYPE=command MSG="Warming up extruder to 220"
    RESPOND TYPE=command MSG="Warming up bed to 60"
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __temps __preheat_abs]
type: command
name: Preheat ABS
gcode:
    TOGGLE_STATLEDY
    M140 S90
    M104 S250
    RESPOND TYPE=command MSG="Warming up extruder to 250"
    RESPOND TYPE=command MSG="Warming up bed to 90"
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

#####################################################################
#      OLED filament menue
#####################################################################

[menu __home __filament]
type: list
enable: {printer.extruder.temperature > 180.0 and printer.idle_timeout.state == "Ready"}
name: Filament

[menu __home __filament __load]
type: command
name: Load F
gcode:
    TOGGLE_STATLEDY
    LOAD_FILAMENT
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __filament __unload]
type: command
name: Unolad F
gcode:
    TOGGLE_STATLEDY
    UNLOAD_FILAMENT
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __filament __extrude]
type: input
name: Extrude: {'%.1f' % menu.input}
input: 5
input_step: 1
gcode:
    TOGGLE_STATLEDY
    M83
    G1 E{'%.1f' % menu.input} F60
    TOGGLE_STATLEDY

[menu __home __filament __cooldown]
type: command
name: Cool down
gcode:
    TOGGLE_STATLEDY
    TURN_OFF_HEATERS
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

#####################################################################
#      OLED lights menue
#####################################################################

[menu __home __lights]
type: list
name: Lights

[menu __home __lights __tophat]
type: command
name: Tophat
gcode:
    TOGGLE_STATLEDY
    TOGGLE_HAT
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

#####################################################################
#      OLED fans menue
#####################################################################

[menu __home __fans]
type: list
name: Fans

[menu __home __fans __boostfans]
type: list
name: BoostFans

[menu __home __fans __boostfans __bfspeed]
type: input
name: {"BOF:%3.0f%%(%4.0f%%)" % ((menu.input*100) , (printer['fan_generic boostFans'].speed*100))}
input: {printer['fan_generic boostFans'].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    TOGGLE_STATLEDY
    SET_FAN_SPEED FAN=boostFans SPEED={(menu.input)}
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __fans __partfan]
type: list
name: Part Fan

[menu __home __fans __partfan __pfspeed]
type: input
name: {"PAF:%3.0f%%(%4.0f%%)" % ((menu.input*100) , (printer.fan.speed*100))}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    TOGGLE_STATLEDY
    M106 S{'%d' % (menu.input*255)}
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __fans __encf]
type: list
name: Enclosure Fan

[menu __home __fans __encf __enclosurefan]
type: input
name: {"ENF:%3.0fC(%4.0fC)" % ((menu.input) , (printer['temperature_fan print_chamber'].target))}
input: {printer.fan.speed}
input_min: 0
input_max: 100
input_step: 1
gcode:
    TOGGLE_STATLEDY
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=print_chamber TARGET={(menu.input)}
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __fans __ebayfan]
type: list
name: E-Bay Fan

[menu __home __fans __ebayfan __bayfan]
type: input
name: {"EBF:%3.0fC(%4.0fC)" % ((menu.input) , ((printer['temperature_fan electronics_bay'].target)))}
input: {printer.fan.speed}
input_min: 0
input_max: 100
input_step: 1
gcode:
    TOGGLE_STATLEDY
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=electronics_bay TARGET={(menu.input)}
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __fans __steppers]
type: list
name: Stepper Fans

[menu __home __fans __steppers __steprl]
type: input
name: {"L:%3.0fC(%4.0fC)" % ((menu.input) , ((printer['temperature_fan Stepper_Left'].target)))}
input: {printer.fan.speed}
input_min: 0
input_max: 100
input_step: 1
gcode:
    TOGGLE_STATLEDY
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Stepper_Left TARGET={(menu.input)}
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

[menu __home __fans __steppers __steprr]
type: input
name: {"R:%3.0fC(%4.0fC)" % ((menu.input) , ((printer['temperature_fan Stepper_Righ'].target)))}
input: {printer.fan.speed}
input_min: 0
input_max: 100
input_step: 1
gcode:
    TOGGLE_STATLEDY
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Stepper_Righ TARGET={(menu.input)}
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

#####################################################################
#      Display macros menue
#####################################################################

[menu __home __macros]
type: list
name: Macros

[menu __home __macros __gbackup]
type: command
name: Git push
gcode:
    TOGGLE_STATLEDY
    RUN_SHELL_COMMAND CMD=git_backup
    TOGGLE_STATLEDY
    TOGGLE_STATLEDG

#####################################################################
#      Display template
#####################################################################

[display_template _heater_temperature]
param_heater_name: "extruder"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%3.0f" % (heater.temperature,) }
    # Optionally show target
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_template _printing_time]
text:
  {% set ptime = printer.idle_timeout.printing_time %}
  { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

[display_template _print_status]
text:
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    Ready
  {% endif %}

#####################################################################
#      Display data
#####################################################################

[display_data _default extruder]
position: 0, 0
text:
  {% set active_extruder = printer.toolhead.extruder %}
  { render("_heater_temperature", param_heater_name=active_extruder) }

[display_data _default heater_bed]
position: 0, 10
text: { render("_heater_temperature", param_heater_name="heater_bed") }

[display_data _default print_progress]
position: 1, 0
text: { "{:^10.0%}".format(printer.display_status.progress) }

[display_data _default progress_bar]
position: 1, 1 # Draw graphical progress bar after text is written
text: { draw_progress_bar(1, 0, 10, printer.display_status.progress) }

[display_data _default printing_time]
position: 1, 10
text: { "%6s" % (render("_printing_time").strip(),) }

[display_data _default partfan]
position: 2, 0
text:
  {% if 'fan' in printer %}
    { "PF {:^4.0%}".format(printer.fan.speed) }
  {% endif %}

[display_data _default boostfan]
position: 2, 9
text:
  {% set speed = printer['fan_generic boostFans'].speed %}
  { "BF {:>4.0%}".format(speed) }

[display_data _default extruderfan]
position: 3, 0
text:
  {% set speed = printer['heater_fan hotend_fan'].speed %}
  { "EF {:>4.0%}".format(speed) }

[display_data _default bayfan]
position: 3, 9
text:
  {% set speed = printer['temperature_fan electronics_bay'].speed %}
  { "ES {:>4.0%}".format(speed) }

#####################################################################
#      LEDs and bttn macros
#####################################################################

# [neopixel Bttns]
# pin: oledbttns:PA4
# chain_count: 8
# color_order: GRB
# initial_RED: 0
# initial_GREEN: 1
# initial_BLUE: 0

[gcode_button Btn_1]
pin: ^!oledbttns:PA0
press_gcode:
    TOGGLE_HAT
    TOGGLE_STATLEDG

[gcode_macro TOGGLE_HAT]
gcode:
      {% if printer['neopixel hat'].color_data == [(0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0)] %}
        SET_LED LED=hat GREEN=1 BLUE=1 RED=1
      {% else %}
        SET_LED LED=hat GREEN=0 BLUE=0 RED=0
    {% endif %}

[gcode_macro TOGGLE_STATLEDG]
gcode:
      {% if printer['output_pin GREENLED'].value == 0.0 %}
        SET_PIN PIN=GREENLED VALUE=1
      {% else %}
        SET_PIN PIN=GREENLED VALUE=0
    {% endif %}

[gcode_macro TOGGLE_STATLEDY]
gcode:
      {% if printer['output_pin YELLOWLED'].value == 0.0 %}
        SET_PIN PIN=YELLOWLED VALUE=1
      {% else %}
        SET_PIN PIN=YELLOWLED VALUE=0
    {% endif %}